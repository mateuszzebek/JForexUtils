buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.3.0'
        classpath 'net.saliman:gradle-cobertura-plugin:2.4.0'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1"
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.4.0'
    id 'com.github.kt3k.coveralls' version '2.7.1'
}
cobertura.coverageFormats = ['html', 'xml']

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

group= 'com.jforex.programming'
version = '0.9.813'
sourceCompatibility = 1.8
targetCompatibility = 1.8


description ="""
A collection of utilities for Dukascopy's JForex API. See http://www.dukascopy.com/wiki for further documentation.
Project name: ${project.name}
"""

repositories {
   mavenCentral()
   maven {
       url "https://www.dukascopy.com/client/jforexlib/publicrepo"
   }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

dependencies {
   compile 'io.reactivex.rxjava2:rxjava:2.2.0'
   compile 'com.dukascopy.api:JForex-API:2.13.56'
   compile 'com.google.guava:guava:20.0'
   compile 'org.apache.logging.log4j:log4j-api:2.5'
   compile 'org.apache.logging.log4j:log4j-core:2.5'
   compile 'org.apache.commons:commons-collections4:4.1'
   compile 'org.apache.commons:commons-lang3:3.4'
   compile 'org.aeonbits.owner:owner:1.0.9'
   compile 'com.github.dpaukov:combinatoricslib3:3.2.0'
   
   testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
   testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
   testCompile 'org.mockito:mockito-core:2.7.2'
   testCompile 'junit:junit:4.12'
   testCompile 'nl.jqno.equalsverifier:equalsverifier:2.1.6'
}

javadoc {
    exclude "**/test/**"
    options {
        windowTitle = "JForexUtils Javadoc ${project.version}"
    }
}

gradle.projectsEvaluated {
   tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

tasks.coveralls {
    dependsOn 'check'
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,  
                   'Implementation-Version': version,
                   'Bundle-Name': 'JForexUtils',
                   'Bundle-SymbolicName': 'com.jforex.programming',
                   'Export-Package': 'com.jforex.programming.*'
    }
    baseName = project.name
}

task uberJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,  
                   'Implementation-Version': version,
                   'Class-Path': '.' + ' ' + configurations.compile.collect { it.getName() }.join(' ')
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJarToPlugins(type: Copy, dependsOn: ':jar') {
    if (project.hasProperty('pluginFolder')) {
        from "${project.buildDir}/libs/${jar.archiveName}"
        into pluginFolder
    }
}

task copyUberJarToPlugins(type: Copy, dependsOn: ':uberJar') {
    if (project.hasProperty('pluginFolder')) {
        from "${project.buildDir}/libs/${jar.archiveName}"
        into pluginFolder
    }
}
